name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run daily security scans
    - cron: '0 2 * * *'

# Cancel in-progress runs when new commit pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

# Global default: read-only access
permissions:
  contents: read

env:
  PYTHON_VERSION: '3.13'
  POETRY_VERSION: '1.7.0'

jobs:
  quality-checks:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    timeout-minutes: 15

    permissions:
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: pyproject.toml

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Verify tool installation
      run: |
        python -m black --version
        python -m isort --version
        python -m ruff --version
        python -m mypy --version
        python -m bandit --version
        python -m interrogate --version
        python -m radon --version
        python -m safety --version

    - name: Check code formatting with Black
      run: python -m black --check --diff domaintools_client/ tests/ examples/

    - name: Check import sorting with isort
      run: python -m isort --check-only --diff domaintools_client/ tests/ examples/

    - name: Lint with Ruff
      run: python -m ruff check domaintools_client/ tests/ examples/

    - name: Type checking with MyPy
      run: python -m mypy domaintools_client/

    - name: Security scan with Bandit
      run: |
        python -m bandit -r domaintools_client/ -f json -o bandit-report.json || true
        python -m bandit -r domaintools_client/ -f txt || true
      continue-on-error: true

    - name: Upload Bandit results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: bandit-results
        path: bandit-report.json
        if-no-files-found: warn

    - name: Dependency vulnerability scan with Safety
      run: |
        python -m safety check --output json --save-json safety-report.json || true
        python -m safety check || true
      continue-on-error: true

    - name: Upload Safety results
      uses: actions/upload-artifact@v4
      if: always() && hashFiles('safety-report.json') != ''
      with:
        name: safety-results
        path: safety-report.json

    - name: Check docstring coverage
      run: python -m interrogate --verbose --fail-under=80 domaintools_client/

    - name: Complexity analysis
      run: |
        python -m radon cc domaintools_client/ --min B --show-complexity
        python -m radon mi domaintools_client/ --min B

  test-suite:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30

    permissions:
      contents: read

    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux tests (primary platform)
          - os: ubuntu-latest
            python-version: '3.8'   # Minimum supported
          - os: ubuntu-latest
            python-version: '3.11'  # Stable
          - os: ubuntu-latest
            python-version: '3.13'  # Latest
          # Windows compatibility test (latest Python only)
          - os: windows-latest
            python-version: '3.13'
          # macOS compatibility test (latest Python only)
          - os: macos-latest
            python-version: '3.13'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run tests with coverage
      run: |
        pytest -m "not benchmark" --cov=domaintools_client --cov-report=xml --cov-report=html --cov-report=term

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: py${{ matrix.python-version }}-${{ matrix.os }}
        name: codecov-${{ matrix.os }}-py${{ matrix.python-version }}
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: Upload coverage HTML
      uses: actions/upload-artifact@v4
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.13'
      with:
        name: coverage-html-report
        path: htmlcov/
        if-no-files-found: warn

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [quality-checks, test-suite]
    if: github.event_name != 'schedule'

    permissions:
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run CLI integration tests
      run: |
        # Test CLI help
        python dt-cli.py --help
        python dt-cli.py config --help
        python dt-cli.py domain --help

        # Test configuration
        python dt-cli.py status

    - name: Test package installation
      run: |
        pip uninstall -y domaintools-client
        pip install -e .
        python -c "import domaintools_client; print('Package imports successfully')"

  performance-benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    timeout-minutes: 25
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    permissions:
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install pytest-benchmark

    - name: Run performance benchmarks
      run: |
        pytest -m benchmark --benchmark-json=benchmark-results.json
      continue-on-error: true

    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: benchmark-results.json
        if-no-files-found: warn

  security-scan:
    name: Advanced Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 25
    if: github.event_name == 'schedule' || github.event_name == 'push'

    permissions:
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install semgrep

    - name: Run Bandit security scan
      run: |
        python -m bandit -r domaintools_client/ -f json -o bandit-detailed.json || true
        python -m bandit -r domaintools_client/ -f txt
      continue-on-error: true

    - name: Run Safety dependency check
      run: |
        python -m safety check --output json --save-json safety-detailed.json || true
        python -m safety check || true
      continue-on-error: true

    - name: Run Semgrep security scan
      run: |
        semgrep --config=p/python \
          --config=p/security-audit \
          --json \
          --output=semgrep-results.json \
          domaintools_client/ || true
      continue-on-error: true

    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results
        path: |
          bandit-detailed.json
          safety-detailed.json
          semgrep-results.json
        if-no-files-found: warn

  build-and-publish:
    name: Build & Publish
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [quality-checks, test-suite, integration-tests]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')

    permissions:
      contents: read
      id-token: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: python -m build

    - name: Check package
      run: twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-package
        path: dist/
        if-no-files-found: error

    - name: Publish to TestPyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
      run: |
        twine upload --repository testpypi dist/*

    - name: Publish to PyPI
      if: startsWith(github.ref, 'refs/tags/')
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/*

  docker-build:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [quality-checks, test-suite]
    if: github.event_name == 'push'

    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      if: github.ref == 'refs/heads/main'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: yourusername/domaintools-client
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: ${{ github.ref == 'refs/heads/main' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  notify-results:
    name: Notify Results
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [quality-checks, test-suite, integration-tests]
    if: always()

    permissions:
      contents: read

    steps:
    - name: Notify success
      if: needs.quality-checks.result == 'success' && needs.test-suite.result == 'success'
      run: |
        echo "All quality checks and tests passed successfully"
        echo "Code Quality: PASS"
        echo "Security: PASS"
        echo "Tests: PASS"

    - name: Notify failure
      if: needs.quality-checks.result == 'failure' || needs.test-suite.result == 'failure'
      run: |
        echo "Quality checks or tests failed"
        echo "Please review the logs and fix issues"
        exit 1
