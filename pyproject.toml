[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "domaintools-client"
version = "0.1.0"
description = "A powerful CLI and Python library for DomainTools API with rich formatting"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "Your Name", email = "your.email@example.com"}
]
maintainers = [
    {name = "Your Name", email = "your.email@example.com"}
]
keywords = [
    "domaintools",
    "domain",
    "whois",
    "dns",
    "threat-intelligence",
    "cybersecurity",
    "cli",
    "api"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "Intended Audience :: System Administrators",
    "Topic :: Security",
    "Topic :: Internet :: Name Service (DNS)",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Operating System :: OS Independent",
    "Environment :: Console",
]

dependencies = [
    "domaintools-api>=2.0.0",
    "rich>=13.0.0",
    "click>=8.0.0",
    "python-dotenv>=1.0.0",
    "pydantic>=2.0.0",
    "aiohttp>=3.9.0",
    "typing-extensions>=4.8.0",
    "pyyaml>=6.0.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",

    # Code formatting and linting
    "black>=23.0.0",
    "isort>=5.12.0",
    "ruff>=0.1.0",
    "flake8>=6.0.0",

    # Type checking
    "mypy>=1.0.0",
    "types-PyYAML",
    "types-requests",

    # Security and quality
    "bandit>=1.7.0",
    "safety>=3.0.0",
    "interrogate>=1.5.0",
    "radon>=6.0.0",

    # Development workflow
    "pre-commit>=3.0.0",
]

docs = [
    "sphinx>=6.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "sphinx-click>=4.4.0",
]

[project.urls]
Homepage = "https://github.com/yourusername/domaintools-client"
Documentation = "https://domaintools-client.readthedocs.io"
Repository = "https://github.com/yourusername/domaintools-client"
"Bug Tracker" = "https://github.com/yourusername/domaintools-client/issues"

[project.scripts]
domaintools = "domaintools_client.cli.main:main"
dt = "domaintools_client.cli.main:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["domaintools_client*"]
exclude = ["tests*", "docs*"]

[tool.setuptools.package-data]
domaintools_client = ["py.typed"]

[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311', 'py312', 'py313']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_unimported = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
check_untyped_defs = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --cov=domaintools_client --cov-report=term-missing"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_functions = ["test_*"]
python_classes = ["Test*"]
filterwarnings = [
    "ignore::DeprecationWarning:pydantic.*",
]

[tool.coverage.run]
source = ["domaintools_client"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if False:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Ruff configuration
[tool.ruff]
line-length = 100
target-version = "py38"
extend-exclude = [
    ".git",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
    ".venv",
    "build",
    "dist",
    "venv",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # Line too long (handled by black)
    "B008",  # Do not perform function calls in argument defaults
]

[tool.ruff.lint.isort]
known-first-party = ["domaintools_client"]

# isort configuration
[tool.isort]
profile = "black"
line_length = 100
known_first_party = ["domaintools_client"]
skip = [".git", ".mypy_cache", ".pytest_cache", ".venv", "build", "dist", "venv"]

# Bandit configuration
[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection for examples

# Interrogate configuration
[tool.interrogate]
ignore-init-method = true
ignore-init-module = true
ignore-magic = true
ignore-semiprivate = true
ignore-private = true
ignore-property-decorators = true
ignore-module = true
fail-under = 80
exclude = ["venv", ".venv", "tests", "build", "dist"]
verbose = 2

# MyPy additional configuration
[[tool.mypy.overrides]]
module = [
    "domaintools.*",
    "pytest.*",
    "rich.*"
]
ignore_missing_imports = true
